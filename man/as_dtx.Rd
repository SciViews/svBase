% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_dtx.R
\name{as_dtx}
\alias{as_dtx}
\alias{as_dtrm}
\alias{as_dtf}
\alias{as_dtt}
\alias{as_dtbl}
\alias{default_dtx}
\alias{as.matrix.tbl_df}
\alias{as_matrix}
\title{Coerce objects into data.trames, data.frames, data.tables, tibbles or matrices}
\usage{
as_dtx(x, ..., rownames = NULL, keep.key = TRUE, byref = FALSE)

as_dtrm(x, ..., rownames = NULL, keep.key = TRUE, byref = FALSE)

as_dtf(x, ..., rownames = NULL, keep.key = TRUE, byref = NULL)

as_dtt(x, ..., rownames = NULL, keep.key = TRUE, byref = FALSE)

as_dtbl(x, ..., rownames = NULL, keep.key = TRUE, byref = NULL)

default_dtx(x, ..., rownames = NULL, keep.key = TRUE, byref = FALSE)

\method{as.matrix}{tbl_df}(x, row.names = NULL, optional = FALSE, ...)

as_matrix(x, rownames = NULL, ...)
}
\arguments{
\item{x}{An object.}

\item{...}{Further arguments passed to the methods (not used yet).}

\item{rownames}{The name of the column with row names. If \code{NULL}, it is assessed from \code{getOptions("SciViews.dtx.rownames")}.}

\item{keep.key}{Do we keep the data.table key into a "key" attribute or do we restore \code{data.table} or \code{data.trame} key from the attribute?}

\item{byref}{If \code{TRUE}, the object is modified by reference when converted into a \code{data.table} (faster, but not conventional). This is \code{FALSE} by default, or \code{NULL} if the argument does not apply in the context.}

\item{row.names}{Same as \code{rownames}, but for base R functions.}

\item{optional}{logical, If \code{TRUE}, setting row names and converting column names to syntactically correct names is optional.}
}
\value{
The coerced object. For \code{as_dtx()}, the coercion is determined from \code{getOption("SciViews.as_dtx")} which must return one of the four other \code{as_dt...()} functions (\code{as_dtrm} by default). The \code{default_dtx()} does the same as \code{as_dtx()} if the object is a data.trame, a data.frame, a data.table, or a tibble, but it return the unmodified object for any other class (including subclassed data frames). This is a convenient function to force conversion only between those four objects classes.
}
\description{
Objects are coerced into the desired class. For \code{\link[=as_dtx]{as_dtx()}}, the
desired class is obtained from \code{getOption("SciViews.as_dtx")}, with a default
value producing a data.trame object. If the data are grouped with
\code{\link[dplyr:group_by]{dplyr::group_by()}}, the resulting data frame is also \code{\link[dplyr:group_by]{dplyr::ungroup()}}ed
in the process.
}
\note{
Use \code{\link[=as_matrix]{as_matrix()}} instead of \code{\link[base:matrix]{base::as.matrix()}}: it has different default
arguments to better account for \code{rownames} in data.table and tibble!
}
\examples{
# A data.frame
dtf <- dtf(
  x = 1:5,
  y = rnorm(5),
  f = letters[1:5],
  l = sample(c(TRUE, FALSE), 5, replace = TRUE))

# Convert into a tibble
(dtbl <- as_dtbl(dtf))
# Since row names are trivial (1 -> 5), a .rownames column is not added

dtf2 <- dtf
rownames(dtf2) <- letters[1:5]
dtf2

# Now, the conversion into a tibble adds .rownames
(dtbl2 <- as_dtbl(dtf2))
# and data frame row names are set again when converted bock to dtf
as_dtf(dtbl2)

# It also work for conversions data.frame <-> data.table
(dtt2 <- as_dtt(dtf2))
as_dtf(dtt2)
# or data.frame <-> data.trame
(dtrm2 <- as_dtrm(dtf2))
as_dtf(dtrm2)

# It does not work when converting a tibble or a data.table into a matrix
# with as.matrix()
as.matrix(dtbl2)
# ... but as_matrix() does the job!
as_matrix(dtbl2)

# The name for row in dtrm, dtt and dtbl is in:
# (data.frame's row names are converted into a column with this name)
getOption("SciViews.dtx.rownames", default = ".rownames")

# Convert into the preferred data frame object (data.trame by default)
(dtx2 <- as_dtx(dtf2))
class(dtx2)

# The default data frame object used:
getOption("SciViews.as_dtx", default = as_dtrm)

# default_dtx() does the same as as_dtx(),
# but it also does not change other objects
# So, it is safe to use whatever the object you pass to it
(dtx2 <- default_dtx(dtf2))
class(dtx2)
# Any other object than data.trame, data.frame, data.table or tbl_df
# is not converted
res <- default_dtx(1:5)
class(res)
# No conversion if the data frame is subclassed
dtf3 <- dtf2
class(dtf3) <- c("subclassed", "data.frame")
class(default_dtx(dtf3))

# data.table keys are converted into a 'key' attribute and back
library(data.table)
setkey(dtt2, 'x')
haskey(dtt2)
key(dtt2)

(dtf3 <- as_dtf(dtt2))
attributes(dtf3)
# Key is restored when converted back into a data.table (also from a tibble)
(dtt3 <- as_dtt(dtf3))
haskey(dtt3)
key(dtt3)

# Grouped tibbles are ungrouped with as_dtbl() or as_dtx()/default_dtx()!
mtcars |> dplyr::group_by(cyl) -> mtcars_grouped
class(mtcars_grouped)
mtcars2 <- as_dtbl(mtcars_grouped)
class(mtcars2)
}
