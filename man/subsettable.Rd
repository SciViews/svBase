% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subsettable.R
\name{subsettable}
\alias{subsettable}
\alias{$.subsettable_type}
\alias{$.subsettable_type2}
\alias{$.subsettable_which}
\alias{name_function_type}
\alias{list_types}
\alias{get_type}
\alias{args_type}
\alias{.DollarNames.subsettable_type}
\title{Define a function as being 'subsettable' using $ operator}
\usage{
\method{$}{subsettable_type}(x, name)

\method{$}{subsettable_type2}(x, name)

\method{$}{subsettable_which}(x, name)

name_function_type(fun, method = NULL, type)

list_types(fun, method = NULL)

get_type(fun, method = NULL, type, stop.if.missing = TRUE)

args_type(fun, method = NULL, type)

\method{.DollarNames}{subsettable_type}(x, pattern = "")
}
\arguments{
\item{x}{A \code{subsettable_type} function.}

\item{name}{The value to use for the \verb{type=} argument.}

\item{fun}{The name of the function (as a scalar string).}

\item{method}{An optional method name (as a scalar string).}

\item{type}{The type to select (as a scalar string).}

\item{stop.if.missing}{If \code{TRUE} (default), an error is raised if the
requested type is not found. If \code{FALSE}, \code{NULL} is returned instead.}

\item{pattern}{A regular expression. Only matching names are returned.}
}
\description{
In case a textual argument allows for selecting the result, for
instance, if \code{plot()} allows for several charts that you can choose with a
\verb{type=} or \verb{which=}, making the function 'subsettable' also allows to
indicate \code{fun$variant()}. The \code{subsettable_type2} variant is faster for only
internal implementation of various types, while \code{subsettable_type} first
searches for a function with \verb{name.<generic>$type()}. See examples.
}
\examples{
# Simple selection of type with a switch inside the function itself
foo <- structure(function(x, type = c("histogram", "boxplot"), ...) {
  type <- match.arg(type, c("histogram", "boxplot"))
  switch(type,
    histogram = hist(x, ...),
    boxplot = boxplot(x, ...),
    stop("unknow type")
  )
}, class = c("function", "subsettable_type2"))
foo

# This function can be used as usual:
foo(rnorm(50), type = "histogram")
# ... but also this way:
foo$histogram(rnorm(50))
foo$boxplot(rnorm(50))

# A more complex use, where it is possible to define additional types easily.
# It also allow for completion after fun$... and completion of functions
# arguments, depending on the selected type (to avoid putting all arguments
# for all types together, otherwise, it is a mess)
head2 <- structure(function(data, n = 10, ..., type = "default") {
  # This was the old (static) aaproach: not possible to add a new type
  # without modifying the function head2()
  #switch(type,
  #  default = `.head2$default`(data, n = n, ...),
  #  fun = `.head2$fun`(data, n = n, ...)
  #)
  # This is the new (dynamic) approach
  get_type("head2", type = type)(data, n = n, ...)
}, class = c("subsettable_type", "function", "head2"))

# We define two types for head2(): default and fun
`head2_default` <- function(data, n = 10, ...) {
  head(data, n = n)
}

# Apply a fun on head() - just an example, not necessarily useful
`head2_fun` <- function(data, n = 10, fun = summary, ...) {
  head(data, n = n) |> fun(...)
}

head2(iris)
head2(iris, type = "default") # Idem
head2$default(iris) # Idem
head2$fun(iris) # The other type, with fun = summary()
head2$fun(iris, fun = str)

# Now, the completion (e.g., in RStudio or Positron)
# 1. Type head2$ and you got the list of available types
# 2. Select "default" then hit <tab>, you got the list of args for default
# 3. Do the same but select "fun", now you got the arguments for the fun type
# 4. Just write a new `.head2_<type>` function and <type> is automatically
#    integrated!
}
\concept{create 'subsettable' functions}
\keyword{utilities}
