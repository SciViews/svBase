[{"path":[]},{"path":"https://www.sciviews.org/svBase/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://www.sciviews.org/svBase/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://www.sciviews.org/svBase/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://www.sciviews.org/svBase/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://www.sciviews.org/svBase/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement phgrosjean@sciviews.org. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://www.sciviews.org/svBase/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://www.sciviews.org/svBase/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://www.sciviews.org/svBase/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://www.sciviews.org/svBase/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://www.sciviews.org/svBase/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://www.sciviews.org/svBase/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://www.sciviews.org/svBase/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Philippe Grosjean Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://www.sciviews.org/svBase/TODO.html","id":null,"dir":"","previous_headings":"","what":"svBase To Do list","title":"svBase To Do list","text":"fquantile() frange() operate vectors , useful get function returns one quantile fast stat functions. Also fcumsum(), flag(), … => make category additional functions. collect_dtx(): use collect, as_tibble() like automatically ungroup (currently, collect ungroup ). ??? Rework sXXX() speedy functions simply reuse {dplyr} {tidyr} counterparts. Implement {tidyr} verbs done yet: nest_join(), chop(), unchop(), nest(), unnest(), unnest_longer(), unnest_wider(), hoist(), pack(), unpack(). Check package dependencies make sure speedy fast functions can used package minimal dependencies ({data.table} {collapse} OK, {dplyr} {tidyr} ). rownames() rownames<-() get assign .rownames data/table tbl_df objects? something similar keys data.table tbl_df? Display information print() methods data.frame, data.table tbl_df: help page, comment, labels units, … See: vignette(“extending”, package = “pillar”). Also indicate key data.table object.","code":""},{"path":"https://www.sciviews.org/svBase/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philippe Grosjean. Author, maintainer.","code":""},{"path":"https://www.sciviews.org/svBase/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Grosjean, Ph. & Engels, G. (2024). SciViews::R. UMONS, Mons, Belgium. URL https://sciviews.r-universe.dev/.","code":"@Manual{,   title = {SciViews::R},   author = {Philippe Grosjean and Guyliann Engels},   organization = {UMONS},   address = {MONS, Belgium},   year = {2024},   url = {https://sciviews.r-universe.dev/}, }"},{"path":"https://www.sciviews.org/svBase/index.html","id":null,"dir":"","previous_headings":"","what":"Base Objects like Data Frames for SciViews::R","title":"Base Objects like Data Frames for SciViews::R","text":"{svBase} sets way data frames (objects like R base’s data.frame, data.table tibble tbl_df) managed SciViews. user can select class object uses default many SciViews functions return format. Also conversion one smoothed, including management data.frame’s row names data.table’s keys. Also homogeneous ways create data frame print also provided.","code":""},{"path":"https://www.sciviews.org/svBase/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Base Objects like Data Frames for SciViews::R","text":"{svBase} available CRAN yet. install SciViews R-Universe. install package dependencies, run following command R: {r, eval=FALSE} install.packages('svBase', repos = c('https://sciviews.r-universe.dev',   'https://cloud.r-project.org')) can also install latest development version. Make sure {remotes} R package installed: Use install_github() install {svBase} package Github (source main branch recompiled machine): R install required dependencies automatically, compile install {svBase}.","code":"install.packages(\"remotes\") remotes::install_github(\"SciViews/svBase\")"},{"path":"https://www.sciviews.org/svBase/index.html","id":"further-explore-svbase","dir":"","previous_headings":"","what":"Further explore {svBase}","title":"Base Objects like Data Frames for SciViews::R","text":"can get help package way: Make {svBase} package available R session: Get help package: instructions, please, refer help pages https://www.sciviews.org/svBase/.","code":"library(\"svBase\") library(help = \"svBase\") help(\"svBase-package\") vignette(\"svBase\") # None is installed with install_github()"},{"path":"https://www.sciviews.org/svBase/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Base Objects like Data Frames for SciViews::R","text":"Please note {svBase} package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://www.sciviews.org/svBase/reference/alt_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternate assignment (multiple and/or collect results from dplyr) — alt_assign","title":"Alternate assignment (multiple and/or collect results from dplyr) — alt_assign","text":"alternate assignment operators can used perform multiple assignment (also known destructuring assignment). imported zeallot package (see corresponding help page zeallot::operator complete description). also performs dplyr::collect() allowing get results dplyr extensions like dtplyr data.tables, dbplyr databases. Finally two assignment operators also make sure preferred data frame object returned using default_dtx().","code":""},{"path":"https://www.sciviews.org/svBase/reference/alt_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternate assignment (multiple and/or collect results from dplyr) — alt_assign","text":"","code":"value %->% x  x %<-% value  # S3 method for default collect(x, ...)"},{"path":"https://www.sciviews.org/svBase/reference/alt_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alternate assignment (multiple and/or collect results from dplyr) — alt_assign","text":"value object assigned. x name, name structure multiple (deconstructing) assignment, object specific [dplyr::collect[]) method collect.default(). ... arguments passed method (used default one)","code":""},{"path":"https://www.sciviews.org/svBase/reference/alt_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alternate assignment (multiple and/or collect results from dplyr) — alt_assign","text":"operators invisibly return value. collect.default() simply return x.","code":""},{"path":"https://www.sciviews.org/svBase/reference/alt_assign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Alternate assignment (multiple and/or collect results from dplyr) — alt_assign","text":"assignation operator overloaded get interesting properties context tidyverse pipelines make sure always return preferred data frame object (data.frame, data.table, tibble). Thus, assigned, value modified calling dplyr::collect() applying default_dtx().","code":""},{"path":"https://www.sciviews.org/svBase/reference/alt_assign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alternate assignment (multiple and/or collect results from dplyr) — alt_assign","text":"","code":"# The alternate assignment operator performs three steps: # 1) Collect results from {dbplyr} or {dtplyr} library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(data.table) #>  #> Attaching package: ‘data.table’ #> The following objects are masked from ‘package:dplyr’: #>  #>     between, first, last library(dtplyr) library(svBase) dtt <- data.table(x = 1:5, y = rnorm(5)) dtt |>   mutate(x2 = x^2) |>   select(x2, y) ->   res  print(res) #>       x2            y #>    <num>        <num> #> 1:     1 -1.400043517 #> 2:     4  0.255317055 #> 3:     9 -2.437263611 #> 4:    16 -0.005571287 #> 5:    25  0.621552721 class(res) # This is a data frame #> [1] \"data.table\" \"data.frame\"  dtt |>   lazy_dt() |>   mutate(x2 = x^2) |>   select(x2, y) ->   res  print(res) #> Source: local data table [5 x 2] #> Call:   setcolorder(copy(`_DT1`)[, `:=`(x2 = x^2)][, `:=`(\"x\", NULL)],  #>     c(\"x2\", \"y\")) #>  #>      x2        y #>   <dbl>    <dbl> #> 1     1 -1.40    #> 2     4  0.255   #> 3     9 -2.44    #> 4    16 -0.00557 #> 5    25  0.622   #>  #> # Use as.data.table()/as.data.frame()/as_tibble() to access results class(res) # This is NOT a data frame #> [1] \"dtplyr_step_call\" \"dtplyr_step\"       # Same pipeline, but assigning with %->% dtt |>   lazy_dt() |>   mutate(x2 = x^2) |>   select(x2, y) %->%   res  print(res) #>       x2            y #>    <num>        <num> #> 1:     1 -1.400043517 #> 2:     4  0.255317055 #> 3:     9 -2.437263611 #> 4:    16 -0.005571287 #> 5:    25  0.621552721 class(res) # res is the preferred data frame (data.table by default) #> [1] \"data.table\" \"data.frame\"  # 2) Convert data frame in the chosen format using default_dtx() dtf <- data.frame(x = 1:5, y = rnorm(5)) class(dtf) #> [1] \"data.frame\" res %<-% dtf class(res) # A data.table by default #> [1] \"data.table\" \"data.frame\" # but it can be changed with options(\"SciViews.as_dtx)  # 3) If the {zeallot} syntax is used, make multiple assignment c(X, Y) %<-% dtf # Variables of dtf assigned to different names X #> [1] 1 2 3 4 5 Y #> [1]  1.1484116 -1.8218177 -0.2473253 -0.2441996 -0.2827054  # The %->% is meant to be used in pipelines, otherwise it does the same"},{"path":"https://www.sciviews.org/svBase/reference/as_dtx.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce objects into data.frames, data.tables, tibbles or matrices — as_dtx","title":"Coerce objects into data.frames, data.tables, tibbles or matrices — as_dtx","text":"Objects coerced desired class. as_dtx(), desired class obtained getOption(\"SciViews.as_dtx\"), default value producing data.table object. data grouped dplyr::group_by(), resulting data frame also dplyr::ungroup()ed process.","code":""},{"path":"https://www.sciviews.org/svBase/reference/as_dtx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce objects into data.frames, data.tables, tibbles or matrices — as_dtx","text":"","code":"as_dtx(x, ..., rownames = NULL, keep.key = TRUE, byref = FALSE)  as_dtf(x, ..., rownames = NULL, keep.key = TRUE, byref = NULL)  as_dtt(x, ..., rownames = NULL, keep.key = TRUE, byref = FALSE)  as_dtbl(x, ..., rownames = NULL, keep.key = TRUE, byref = NULL)  default_dtx(x, ..., rownames = NULL, keep.key = TRUE, byref = FALSE)  # S3 method for tbl_df as.matrix(x, row.names = NULL, optional = FALSE, ...)  as_matrix(x, rownames = NULL, ...)"},{"path":"https://www.sciviews.org/svBase/reference/as_dtx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce objects into data.frames, data.tables, tibbles or matrices — as_dtx","text":"x object. ... arguments passed methods (used yet). rownames name column row names. NULL, assessed getOptions(\"SciViews.dtx.rownames\"). keep.key keep data.table key \"key\" attribute restore data.tablekey attribute? byref TRUE, object modified reference converted data.table (faster, conventional). FALSE default, NULL argument apply context. row.names rownames, base R functions. optional logical, TRUE, setting row names converting column names syntactically correct names optional.","code":""},{"path":"https://www.sciviews.org/svBase/reference/as_dtx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce objects into data.frames, data.tables, tibbles or matrices — as_dtx","text":"coerced object. as_dtx(), coercion determined getOption(\"SciViews.as_dtx\") must return one three as_dt...() functions (as_dtt default). default_dtx() as_dtx() object data.frame, data.table, tibble, return unmodified object class (including subclassed data frames). convenient function force conversion three objects classes.","code":""},{"path":"https://www.sciviews.org/svBase/reference/as_dtx.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Coerce objects into data.frames, data.tables, tibbles or matrices — as_dtx","text":"Use as_matrix() instead base::.matrix(): different default arguments better account rownames data.table tibble!","code":""},{"path":"https://www.sciviews.org/svBase/reference/as_dtx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce objects into data.frames, data.tables, tibbles or matrices — as_dtx","text":"","code":"# A data.frame dtf <- dtf(   x = 1:5,   y = rnorm(5),   f = letters[1:5],   l = sample(c(TRUE, FALSE), 5, replace = TRUE))  # Convert into a tibble (dtbl <- as_dtbl(dtf)) #> # A tibble: 5 × 4 #>       x      y f     l     #>   <int>  <dbl> <chr> <lgl> #> 1     1 -0.554 a     TRUE  #> 2     2  0.629 b     TRUE  #> 3     3  2.07  c     FALSE #> 4     4 -1.63  d     FALSE #> 5     5  0.512 e     FALSE # Since row names are trivial (1 -> 5), a .rownames column is not added  dtf2 <- dtf rownames(dtf2) <- letters[1:5] dtf2 #>   x          y f     l #> a 1 -0.5536994 a  TRUE #> b 2  0.6289820 b  TRUE #> c 3  2.0650249 c FALSE #> d 4 -1.6309894 d FALSE #> e 5  0.5124269 e FALSE  # Now, the conversion into a tibble adds .rownames (dtbl2 <- as_dtbl(dtf2)) #> # A tibble: 5 × 5 #>   .rownames     x      y f     l     #>   <chr>     <int>  <dbl> <chr> <lgl> #> 1 a             1 -0.554 a     TRUE  #> 2 b             2  0.629 b     TRUE  #> 3 c             3  2.07  c     FALSE #> 4 d             4 -1.63  d     FALSE #> 5 e             5  0.512 e     FALSE # and data frame row names are set again when converted bock to dtf as_dtf(dtbl2) #>   x          y f     l #> a 1 -0.5536994 a  TRUE #> b 2  0.6289820 b  TRUE #> c 3  2.0650249 c FALSE #> d 4 -1.6309894 d FALSE #> e 5  0.5124269 e FALSE  # It also work for conversions data.frame <-> data.table (dtt2 <- as_dtt(dtf2)) #>    .rownames     x          y      f      l #>       <char> <int>      <num> <char> <lgcl> #> 1:         a     1 -0.5536994      a   TRUE #> 2:         b     2  0.6289820      b   TRUE #> 3:         c     3  2.0650249      c  FALSE #> 4:         d     4 -1.6309894      d  FALSE #> 5:         e     5  0.5124269      e  FALSE as_dtf(dtt2) #>   x          y f     l #> a 1 -0.5536994 a  TRUE #> b 2  0.6289820 b  TRUE #> c 3  2.0650249 c FALSE #> d 4 -1.6309894 d FALSE #> e 5  0.5124269 e FALSE  # It does not work when converting a tibble or a data.table into a matrix # with as.matrix() as.matrix(dtbl2) #>      .rownames x   y            f   l       #> [1,] \"a\"       \"1\" \"-0.5536994\" \"a\" \"TRUE\"  #> [2,] \"b\"       \"2\" \" 0.6289820\" \"b\" \"TRUE\"  #> [3,] \"c\"       \"3\" \" 2.0650249\" \"c\" \"FALSE\" #> [4,] \"d\"       \"4\" \"-1.6309894\" \"d\" \"FALSE\" #> [5,] \"e\"       \"5\" \" 0.5124269\" \"e\" \"FALSE\" # ... but as_matrix() does the job! as_matrix(dtbl2) #>   x   y            f   l       #> a \"1\" \"-0.5536994\" \"a\" \"TRUE\"  #> b \"2\" \" 0.6289820\" \"b\" \"TRUE\"  #> c \"3\" \" 2.0650249\" \"c\" \"FALSE\" #> d \"4\" \"-1.6309894\" \"d\" \"FALSE\" #> e \"5\" \" 0.5124269\" \"e\" \"FALSE\"  # The name for row in dtt and dtbl is in: # (data.frame's row names are converted into a column with this name) getOption(\"SciViews.dtx.rownames\", default = \".rownames\") #> [1] \".rownames\"  # Convert into the preferred data frame object (data.table by default) (dtx2 <- as_dtx(dtf2)) #>    .rownames     x          y      f      l #>       <char> <int>      <num> <char> <lgcl> #> 1:         a     1 -0.5536994      a   TRUE #> 2:         b     2  0.6289820      b   TRUE #> 3:         c     3  2.0650249      c  FALSE #> 4:         d     4 -1.6309894      d  FALSE #> 5:         e     5  0.5124269      e  FALSE class(dtx2) #> [1] \"data.table\" \"data.frame\"  # The default data frame object used: getOption(\"SciViews.as_dtx\", default = as_dtt) #> function (x, ..., rownames = NULL, keep.key = TRUE, byref = FALSE)  #> { #>     if (is.null(rownames))  #>         rownames <- getOption(\"SciViews.dtx.rownames\", default = \".rownames\") #>     if (rownames %in% names(x) || all(rownames(x) == seq_len(nrow(x))))  #>         rownames <- FALSE #>     if (is.data.frame(x) && isTRUE(byref)) { #>         if (isTRUE(keep.key)) { #>             key <- attr(x, \"key\") #>         } #>         else { #>             key <- NULL #>         } #>         x <- .ungroup_dtbl(x) #>         setDT(x, keep.rownames = rownames, key = key) #>         attr(x, \"key\") <- NULL #>     } #>     else { #>         key <- attr(x, \"key\") #>         x <- as.data.table(.ungroup_dtbl(x), keep.rownames = rownames) #>         if (isTRUE(keep.key) && !is.null(key))  #>             setkeyv(x, key) #>         attr(x, \"key\") <- NULL #>     } #>     rownames(x) <- NULL #>     x #> } #> <bytecode: 0x55d87d421ff0> #> <environment: namespace:svBase>  # default_dtx() does the same as as_dtx(), # but it also does not change other objects # So, it is safe to use whaterver the object you pass to it (dtx2 <- default_dtx(dtf2)) #>    .rownames     x          y      f      l #>       <char> <int>      <num> <char> <lgcl> #> 1:         a     1 -0.5536994      a   TRUE #> 2:         b     2  0.6289820      b   TRUE #> 3:         c     3  2.0650249      c  FALSE #> 4:         d     4 -1.6309894      d  FALSE #> 5:         e     5  0.5124269      e  FALSE class(dtx2) #> [1] \"data.table\" \"data.frame\" # Any other object than data.frame, data.table or tbl_df is not converted res <- default_dtx(1:5) class(res) #> [1] \"integer\" # No conversion if the data frame is subclassed dtf3 <- dtf2 class(dtf3) <- c(\"subclassed\", \"data.frame\") class(default_dtx(dtf3)) #> [1] \"subclassed\" \"data.frame\"  # data.table keys are converted into a 'key' attribute and back library(data.table) setkey(dtt2, 'x') haskey(dtt2) #> [1] TRUE key(dtt2) #> [1] \"x\"  (dtf3 <- as_dtf(dtt2)) #>   x          y f     l #> a 1 -0.5536994 a  TRUE #> b 2  0.6289820 b  TRUE #> c 3  2.0650249 c FALSE #> d 4 -1.6309894 d FALSE #> e 5  0.5124269 e FALSE attributes(dtf3) #> $names #> [1] \"x\" \"y\" \"f\" \"l\" #>  #> $row.names #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #> $class #> [1] \"data.frame\" #>  #> $key #> [1] \"x\" #>  # Key is restored when converted back into a data.table (also from a tibble) (dtt3 <- as_dtt(dtf3)) #> Key: <x> #>    .rownames     x          y      f      l #>       <char> <int>      <num> <char> <lgcl> #> 1:         a     1 -0.5536994      a   TRUE #> 2:         b     2  0.6289820      b   TRUE #> 3:         c     3  2.0650249      c  FALSE #> 4:         d     4 -1.6309894      d  FALSE #> 5:         e     5  0.5124269      e  FALSE haskey(dtt3) #> [1] TRUE key(dtt3) #> [1] \"x\"  # Grouped tibbles are ungrouped with as_dtbl() or as_dtx()/default_dtx()! mtcars |> dplyr::group_by(cyl) -> mtcars_grouped class(mtcars_grouped) #> [1] \"grouped_df\" \"tbl_df\"     \"tbl\"        \"data.frame\" mtcars2 <- as_dtbl(mtcars_grouped) class(mtcars2) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\""},{"path":"https://www.sciviews.org/svBase/reference/collect_dtx.html","id":null,"dir":"Reference","previous_headings":"","what":"Force computation of a lazy tidyverse object — collect_dtx","title":"Force computation of a lazy tidyverse object — collect_dtx","text":"dplyr tidyr verbs applied data.table database connection, output data frames objects like dtplyr_step tbl_sql called lazy data frames. actual process triggered using as_dtx(), explicitly dplyr::collect() coerces result tibble. want default svBase data frame object instead, use collect_dtx(), want specific object, use one variants.","code":""},{"path":"https://www.sciviews.org/svBase/reference/collect_dtx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force computation of a lazy tidyverse object — collect_dtx","text":"","code":"collect_dtx(x, ...)  collect_dtf(x, ...)  collect_dtt(x, ...)  collect_dtbl(x, ...)"},{"path":"https://www.sciviews.org/svBase/reference/collect_dtx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force computation of a lazy tidyverse object — collect_dtx","text":"x data.frame, data.table, tibble lazy data frame (dtplyr_step, tbl_sql, ...). ... Arguments passed methods dplyr::collect().","code":""},{"path":"https://www.sciviews.org/svBase/reference/collect_dtx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force computation of a lazy tidyverse object — collect_dtx","text":"data frame (data.frame, data.table tibble's tbl_df), default version collect_dtx().","code":""},{"path":"https://www.sciviews.org/svBase/reference/collect_dtx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force computation of a lazy tidyverse object — collect_dtx","text":"","code":"# Assuming the default data frame for {svBase} is a data.table mtcars_dtt <- as_dtt(mtcars) library(dplyr) library(dtplyr) # A lazy data frame, not a \"real\" data frame! mtcars_dtt |> lazy_dt() |> select(mpg:disp) |> class() #> [1] \"dtplyr_step_subset\" \"dtplyr_step\"        # A data frame mtcars |> select(mpg:disp) |> class() #> [1] \"data.frame\" # A data table mtcars_dtt |> select(mpg:disp) |> class() #> [1] \"data.table\" \"data.frame\" # A tibble, always! mtcars_dtt |> lazy_dt() |> select(mpg:disp) |> collect() |> class() #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\" # The data frame object you want, default one specified for {svBase} mtcars_dtt |> lazy_dt() |> select(mpg:disp) |> collect_dtx() |> class() #> [1] \"data.table\" \"data.frame\""},{"path":"https://www.sciviews.org/svBase/reference/dtx.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame (base's data.frame, data.table or tibble's tbl_df) — dtx","title":"Create a data frame (base's data.frame, data.table or tibble's tbl_df) — dtx","text":"Create data frame (base's data.frame, data.table tibble's tbl_df)","code":""},{"path":"https://www.sciviews.org/svBase/reference/dtx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame (base's data.frame, data.table or tibble's tbl_df) — dtx","text":"","code":"dtx(..., .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"))  dtbl(..., .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"))  dtf(..., .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"))  dtt(..., .name_repair = c(\"check_unique\", \"unique\", \"universal\", \"minimal\"))"},{"path":"https://www.sciviews.org/svBase/reference/dtx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame (base's data.frame, data.table or tibble's tbl_df) — dtx","text":"... set name-value pairs. content data frame. See tibble() details way dynamic-dots processed. .name_repair way problematic column names treated, see also tibble() details.","code":""},{"path":"https://www.sciviews.org/svBase/reference/dtx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame (base's data.frame, data.table or tibble's tbl_df) — dtx","text":"data frame tbl_df object dtbl(), data.frame dtf() data.table dtt().","code":""},{"path":"https://www.sciviews.org/svBase/reference/dtx.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a data frame (base's data.frame, data.table or tibble's tbl_df) — dtx","text":"data.table tibble's tbl_df use row names. However, can add column named .rownames(default), name getOption(\"SciViews.dtx.rownames\") automatically set row names object converted data.frame as_dtf(). dtf(), just create column name directly used row names resulting data.frame object.","code":""},{"path":"https://www.sciviews.org/svBase/reference/dtx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data frame (base's data.frame, data.table or tibble's tbl_df) — dtx","text":"","code":"dtbl1 <- dtbl(   x = 1:5,   y = rnorm(5),   f = letters[1:5],   l = sample(c(TRUE, FALSE), 5, replace = TRUE) ) class(dtbl1) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"  dtf1 <- dtf(   x = 1:5,   y = rnorm(5),   f = letters[1:5],   l = sample(c(TRUE, FALSE), 5, replace = TRUE) ) class(dtf1) #> [1] \"data.frame\"  dtt1 <- dtt(   x = 1:5,   y = rnorm(5),   f = letters[1:5],   l = sample(c(TRUE, FALSE), 5, replace = TRUE)) class(dtt1) #> [1] \"data.table\" \"data.frame\"  # Using dtx(), one construct the preferred data frame object # (a data.table by default, can be changed with options(SciViews.as_dtx = ...)) dtx1 <- dtx(   x = 1:5,   y = rnorm(5),   f = letters[1:5],   l = sample(c(TRUE, FALSE), 5, replace = TRUE)) class(dtx1) # data.table by default #> [1] \"data.table\" \"data.frame\"  # With {svBase} data.table and data.frame objects have the same nice print as tibbles dtbl1 #> # A tibble: 5 × 4 #>       x        y f     l     #>   <int>    <dbl> <chr> <lgl> #> 1     1 -0.171   a     TRUE  #> 2     2  1.63    b     FALSE #> 3     3 -0.783   c     FALSE #> 4     4 -0.00289 d     TRUE  #> 5     5  0.413   e     FALSE dtf1 #>   x           y f     l #> 1 1 -0.09744510 a  TRUE #> 2 2 -0.93584735 b  TRUE #> 3 3 -0.01595031 c  TRUE #> 4 4 -0.82678895 d FALSE #> 5 5 -1.51239965 e  TRUE dtt1 #>        x           y      f      l #>    <int>       <num> <char> <lgcl> #> 1:     1 -0.87231588      a   TRUE #> 2:     2  0.10668461      b  FALSE #> 3:     3 -0.58701399      c   TRUE #> 4:     4 -0.32785359      d  FALSE #> 5:     5 -0.08536101      e   TRUE  # Use tribble() inside dtx() to easily create a data frame: library(tibble) dtx2 <- dtx(tribble(   ~x, ~y, ~f,    1,  3, 'a',    2,  4, 'b' )) dtx2 #>        x     y      f #>    <num> <num> <char> #> 1:     1     3      a #> 2:     2     4      b class(dtx2) #> [1] \"data.table\" \"data.frame\"  # This is how you specify row names for dtf (data.frame) dtf(x = 1:3, y = 4:6, .rownames = letters[1:3]) #>   x y #> a 1 4 #> b 2 5 #> c 3 6"},{"path":"https://www.sciviews.org/svBase/reference/dtx_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Row-wise creation of a data frame — dtx_rows","title":"Row-wise creation of a data frame — dtx_rows","text":"presentation data (see examples) easier read traditional column-wise entry dtx(). used enter small tables R, abuse !","code":""},{"path":"https://www.sciviews.org/svBase/reference/dtx_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row-wise creation of a data frame — dtx_rows","text":"","code":"dtx_rows(...)  dtf_rows(...)  dtt_rows(...)  dtbl_rows(...)"},{"path":"https://www.sciviews.org/svBase/reference/dtx_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row-wise creation of a data frame — dtx_rows","text":"... Specify structure data frame using formulas variable names like ~x variable x. , use one argument per value data frame. possible unquote !! unquote-splice !!!.","code":""},{"path":"https://www.sciviews.org/svBase/reference/dtx_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row-wise creation of a data frame — dtx_rows","text":"data frame class data.frame dtf_rows(), data.table dtt_rows(), tibble tbl_df dtbl_rows() default object dtx_rows().","code":""},{"path":"https://www.sciviews.org/svBase/reference/dtx_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row-wise creation of a data frame — dtx_rows","text":"","code":"df <- dtx_rows(   ~x, ~y, ~group,    1,  3,    \"A\",    6,  2,    \"A\",    10, 4,    \"B\" ) df #>        x     y  group #>    <num> <num> <char> #> 1:     1     3      A #> 2:     6     2      A #> 3:    10     4      B"},{"path":"https://www.sciviews.org/svBase/reference/fstat_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast (flexible and friendly) statistical functions (mainly from collapse) for matrix-like and data frame objects — fstat_functions","title":"Fast (flexible and friendly) statistical functions (mainly from collapse) for matrix-like and data frame objects — fstat_functions","text":"fast statistical function, fast-flexible-friendly statistical functions prefixed \"f\". vectorized functions supersede -f functions, bringing capacity work smoothly matrix-like data frame objects. defined collapse package instance, base mean() operates vector, data frame. matrix recognized vector single mean returned. , contrary, fmean() calculates one mean per column. data frame, usually quicker base functions. need colMeans(), separate function . Fast statistical functions also recognize grouping fgroup_by(), sgroup_by() group_by() calculate mean group case. , need different function like stats::ave(). Finally, functions also TRA= argument computes, instance, TRA = \"-\", (x  f(x)) efficiently (instance calculate residuals subtracting mean). Another particularity na.rm= argument TRUE default, FALSE default mean(). generic functions methods matrix, data.frame, grouped_df default method used simple numeric vectors. defined collapse package, couple , together alternate syntax replace TRA= %_f%.","code":""},{"path":"https://www.sciviews.org/svBase/reference/fstat_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast (flexible and friendly) statistical functions (mainly from collapse) for matrix-like and data frame objects — fstat_functions","text":"","code":"list_fstat_functions()  fn(x, ...)  fna(x, ...)  x %replacef% expr  x %replace_fillf% expr  x %-f% expr  x %+f% expr  x %-+f% expr  x %/f% expr  x %/*100f% expr  x %*f% expr  x %modf% expr  x %-modf% expr"},{"path":"https://www.sciviews.org/svBase/reference/fstat_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast (flexible and friendly) statistical functions (mainly from collapse) for matrix-like and data frame objects — fstat_functions","text":"x numeric vector, matrix, data frame grouped data frame (class 'grouped_df'). ... arguments passed method, like w=, numeric vector (non-negative) weights may contain missing values, TRA=, quoted operator indicating transformation perform: \"replace\" get vector size x results, \"replace_fill\" idem also replace missing data, \"-\" subtract, \"+\" add, \"-+\" subtract add global statistic, \"/\" divide, \"%\" divide multiply 100 (percent), \"*\" multiply, \"%%\" take modulus (remainder division statistic) \"-%%\" subtract modulus ('.e., floor data statistic), see collapse::TRA(). Also na.rm=, logical indicating skip missing values xif TRUE(default). FALSE missing data x, NAis returned. details arguments, see corresponding help page , collapse package. expr expression evaluate RHS %__f% operators.","code":""},{"path":"https://www.sciviews.org/svBase/reference/fstat_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast (flexible and friendly) statistical functions (mainly from collapse) for matrix-like and data frame objects — fstat_functions","text":"number observations fn() number missing observations fna(). list_fstat_functions() returns list known fast statistical functions.","code":""},{"path":"https://www.sciviews.org/svBase/reference/fstat_functions.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fast (flexible and friendly) statistical functions (mainly from collapse) for matrix-like and data frame objects — fstat_functions","text":"page collapse::fast-statistical-functions gives details. fn() count observations, including NAs, fna() counts NAs, fnobs() counts non-missing observations. Instead TRA= one can use %__f% functions __ replace, replace_fill, -, +, -+, /, /*100 TRA=\"%\", *, mod TRA=\"%%\", -mod TRA=\"-%%\". See example.","code":""},{"path":"https://www.sciviews.org/svBase/reference/fstat_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast (flexible and friendly) statistical functions (mainly from collapse) for matrix-like and data frame objects — fstat_functions","text":"","code":"library(collapse) #> collapse 2.0.13, see ?`collapse-package` or ?`collapse-documentation` #>  #> Attaching package: ‘collapse’ #> The following object is masked from ‘package:data.table’: #>  #>     fdroplevels #> The following object is masked from ‘package:stats’: #>  #>     D data(iris) iris_num <- iris[, -5] # Only numerical variables mean(iris$Sepal.Length) # OK, but mean(iris_num does not work) #> [1] 5.843333 colMeans(iris_num) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>     5.843333     3.057333     3.758000     1.199333  # Same fmean(iris_num) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width  #>     5.843333     3.057333     3.758000     1.199333  # Idem, but mean by group for all 4 numerical variables iris |> fgroup_by(Species) |> fmean() #>      Species Sepal.Length Sepal.Width Petal.Length Petal.Width #> 1     setosa        5.006       3.428        1.462       0.246 #> 2 versicolor        5.936       2.770        4.260       1.326 #> 3  virginica        6.588       2.974        5.552       2.026 # Residuals (x - mean(x)) by group iris |> fgroup_by(Species) |> fmean(TRA = \"-\") #>        Species Sepal.Length Sepal.Width Petal.Length Petal.Width #> 1       setosa        0.094       0.072       -0.062      -0.046 #> 2       setosa       -0.106      -0.428       -0.062      -0.046 #> 3       setosa       -0.306      -0.228       -0.162      -0.046 #> 4       setosa       -0.406      -0.328        0.038      -0.046 #> 5       setosa       -0.006       0.172       -0.062      -0.046 #> 6       setosa        0.394       0.472        0.238       0.154 #> 7       setosa       -0.406      -0.028       -0.062       0.054 #> 8       setosa       -0.006      -0.028        0.038      -0.046 #> 9       setosa       -0.606      -0.528       -0.062      -0.046 #> 10      setosa       -0.106      -0.328        0.038      -0.146 #> 11      setosa        0.394       0.272        0.038      -0.046 #> 12      setosa       -0.206      -0.028        0.138      -0.046 #> 13      setosa       -0.206      -0.428       -0.062      -0.146 #> 14      setosa       -0.706      -0.428       -0.362      -0.146 #> 15      setosa        0.794       0.572       -0.262      -0.046 #> 16      setosa        0.694       0.972        0.038       0.154 #> 17      setosa        0.394       0.472       -0.162       0.154 #> 18      setosa        0.094       0.072       -0.062       0.054 #> 19      setosa        0.694       0.372        0.238       0.054 #> 20      setosa        0.094       0.372        0.038       0.054 #> 21      setosa        0.394      -0.028        0.238      -0.046 #> 22      setosa        0.094       0.272        0.038       0.154 #> 23      setosa       -0.406       0.172       -0.462      -0.046 #> 24      setosa        0.094      -0.128        0.238       0.254 #> 25      setosa       -0.206      -0.028        0.438      -0.046 #> 26      setosa       -0.006      -0.428        0.138      -0.046 #> 27      setosa       -0.006      -0.028        0.138       0.154 #> 28      setosa        0.194       0.072        0.038      -0.046 #> 29      setosa        0.194      -0.028       -0.062      -0.046 #> 30      setosa       -0.306      -0.228        0.138      -0.046 #> 31      setosa       -0.206      -0.328        0.138      -0.046 #> 32      setosa        0.394      -0.028        0.038       0.154 #> 33      setosa        0.194       0.672        0.038      -0.146 #> 34      setosa        0.494       0.772       -0.062      -0.046 #> 35      setosa       -0.106      -0.328        0.038      -0.046 #> 36      setosa       -0.006      -0.228       -0.262      -0.046 #> 37      setosa        0.494       0.072       -0.162      -0.046 #> 38      setosa       -0.106       0.172       -0.062      -0.146 #> 39      setosa       -0.606      -0.428       -0.162      -0.046 #> 40      setosa        0.094      -0.028        0.038      -0.046 #> 41      setosa       -0.006       0.072       -0.162       0.054 #> 42      setosa       -0.506      -1.128       -0.162       0.054 #> 43      setosa       -0.606      -0.228       -0.162      -0.046 #> 44      setosa       -0.006       0.072        0.138       0.354 #> 45      setosa        0.094       0.372        0.438       0.154 #> 46      setosa       -0.206      -0.428       -0.062       0.054 #> 47      setosa        0.094       0.372        0.138      -0.046 #> 48      setosa       -0.406      -0.228       -0.062      -0.046 #> 49      setosa        0.294       0.272        0.038      -0.046 #> 50      setosa       -0.006      -0.128       -0.062      -0.046 #> 51  versicolor        1.064       0.430        0.440       0.074 #> 52  versicolor        0.464       0.430        0.240       0.174 #> 53  versicolor        0.964       0.330        0.640       0.174 #> 54  versicolor       -0.436      -0.470       -0.260      -0.026 #> 55  versicolor        0.564       0.030        0.340       0.174 #> 56  versicolor       -0.236       0.030        0.240      -0.026 #> 57  versicolor        0.364       0.530        0.440       0.274 #> 58  versicolor       -1.036      -0.370       -0.960      -0.326 #> 59  versicolor        0.664       0.130        0.340      -0.026 #> 60  versicolor       -0.736      -0.070       -0.360       0.074 #> 61  versicolor       -0.936      -0.770       -0.760      -0.326 #> 62  versicolor       -0.036       0.230       -0.060       0.174 #> 63  versicolor        0.064      -0.570       -0.260      -0.326 #> 64  versicolor        0.164       0.130        0.440       0.074 #> 65  versicolor       -0.336       0.130       -0.660      -0.026 #> 66  versicolor        0.764       0.330        0.140       0.074 #> 67  versicolor       -0.336       0.230        0.240       0.174 #> 68  versicolor       -0.136      -0.070       -0.160      -0.326 #> 69  versicolor        0.264      -0.570        0.240       0.174 #> 70  versicolor       -0.336      -0.270       -0.360      -0.226 #> 71  versicolor       -0.036       0.430        0.540       0.474 #> 72  versicolor        0.164       0.030       -0.260      -0.026 #> 73  versicolor        0.364      -0.270        0.640       0.174 #> 74  versicolor        0.164       0.030        0.440      -0.126 #> 75  versicolor        0.464       0.130        0.040      -0.026 #> 76  versicolor        0.664       0.230        0.140       0.074 #> 77  versicolor        0.864       0.030        0.540       0.074 #> 78  versicolor        0.764       0.230        0.740       0.374 #> 79  versicolor        0.064       0.130        0.240       0.174 #> 80  versicolor       -0.236      -0.170       -0.760      -0.326 #> 81  versicolor       -0.436      -0.370       -0.460      -0.226 #> 82  versicolor       -0.436      -0.370       -0.560      -0.326 #> 83  versicolor       -0.136      -0.070       -0.360      -0.126 #> 84  versicolor        0.064      -0.070        0.840       0.274 #> 85  versicolor       -0.536       0.230        0.240       0.174 #> 86  versicolor        0.064       0.630        0.240       0.274 #> 87  versicolor        0.764       0.330        0.440       0.174 #> 88  versicolor        0.364      -0.470        0.140      -0.026 #> 89  versicolor       -0.336       0.230       -0.160      -0.026 #> 90  versicolor       -0.436      -0.270       -0.260      -0.026 #> 91  versicolor       -0.436      -0.170        0.140      -0.126 #> 92  versicolor        0.164       0.230        0.340       0.074 #> 93  versicolor       -0.136      -0.170       -0.260      -0.126 #> 94  versicolor       -0.936      -0.470       -0.960      -0.326 #> 95  versicolor       -0.336      -0.070       -0.060      -0.026 #> 96  versicolor       -0.236       0.230       -0.060      -0.126 #> 97  versicolor       -0.236       0.130       -0.060      -0.026 #> 98  versicolor        0.264       0.130        0.040      -0.026 #> 99  versicolor       -0.836      -0.270       -1.260      -0.226 #> 100 versicolor       -0.236       0.030       -0.160      -0.026 #> 101  virginica       -0.288       0.326        0.448       0.474 #> 102  virginica       -0.788      -0.274       -0.452      -0.126 #> 103  virginica        0.512       0.026        0.348       0.074 #> 104  virginica       -0.288      -0.074        0.048      -0.226 #> 105  virginica       -0.088       0.026        0.248       0.174 #> 106  virginica        1.012       0.026        1.048       0.074 #> 107  virginica       -1.688      -0.474       -1.052      -0.326 #> 108  virginica        0.712      -0.074        0.748      -0.226 #> 109  virginica        0.112      -0.474        0.248      -0.226 #> 110  virginica        0.612       0.626        0.548       0.474 #> 111  virginica       -0.088       0.226       -0.452      -0.026 #> 112  virginica       -0.188      -0.274       -0.252      -0.126 #> 113  virginica        0.212       0.026       -0.052       0.074 #> 114  virginica       -0.888      -0.474       -0.552      -0.026 #> 115  virginica       -0.788      -0.174       -0.452       0.374 #> 116  virginica       -0.188       0.226       -0.252       0.274 #> 117  virginica       -0.088       0.026       -0.052      -0.226 #> 118  virginica        1.112       0.826        1.148       0.174 #> 119  virginica        1.112      -0.374        1.348       0.274 #> 120  virginica       -0.588      -0.774       -0.552      -0.526 #> 121  virginica        0.312       0.226        0.148       0.274 #> 122  virginica       -0.988      -0.174       -0.652      -0.026 #> 123  virginica        1.112      -0.174        1.148      -0.026 #> 124  virginica       -0.288      -0.274       -0.652      -0.226 #> 125  virginica        0.112       0.326        0.148       0.074 #> 126  virginica        0.612       0.226        0.448      -0.226 #> 127  virginica       -0.388      -0.174       -0.752      -0.226 #> 128  virginica       -0.488       0.026       -0.652      -0.226 #> 129  virginica       -0.188      -0.174        0.048       0.074 #> 130  virginica        0.612       0.026        0.248      -0.426 #> 131  virginica        0.812      -0.174        0.548      -0.126 #> 132  virginica        1.312       0.826        0.848      -0.026 #> 133  virginica       -0.188      -0.174        0.048       0.174 #> 134  virginica       -0.288      -0.174       -0.452      -0.526 #> 135  virginica       -0.488      -0.374        0.048      -0.626 #> 136  virginica        1.112       0.026        0.548       0.274 #> 137  virginica       -0.288       0.426        0.048       0.374 #> 138  virginica       -0.188       0.126       -0.052      -0.226 #> 139  virginica       -0.588       0.026       -0.752      -0.226 #> 140  virginica        0.312       0.126       -0.152       0.074 #> 141  virginica        0.112       0.126        0.048       0.374 #> 142  virginica        0.312       0.126       -0.452       0.274 #> 143  virginica       -0.788      -0.274       -0.452      -0.126 #> 144  virginica        0.212       0.226        0.348       0.274 #> 145  virginica        0.112       0.326        0.148       0.474 #> 146  virginica        0.112       0.026       -0.352       0.274 #> 147  virginica       -0.288      -0.474       -0.552      -0.126 #> 148  virginica       -0.088       0.026       -0.352      -0.026 #> 149  virginica       -0.388       0.426       -0.152       0.274 #> 150  virginica       -0.688       0.026       -0.452      -0.226 #>  #> Grouped by:  Species  [3 | 50 (0)]  # The same calculation, in a little bit more expressive way iris |> fgroup_by(Species) %-f% fmean() #>        Species Sepal.Length Sepal.Width Petal.Length Petal.Width #> 1       setosa        0.094       0.072       -0.062      -0.046 #> 2       setosa       -0.106      -0.428       -0.062      -0.046 #> 3       setosa       -0.306      -0.228       -0.162      -0.046 #> 4       setosa       -0.406      -0.328        0.038      -0.046 #> 5       setosa       -0.006       0.172       -0.062      -0.046 #> 6       setosa        0.394       0.472        0.238       0.154 #> 7       setosa       -0.406      -0.028       -0.062       0.054 #> 8       setosa       -0.006      -0.028        0.038      -0.046 #> 9       setosa       -0.606      -0.528       -0.062      -0.046 #> 10      setosa       -0.106      -0.328        0.038      -0.146 #> 11      setosa        0.394       0.272        0.038      -0.046 #> 12      setosa       -0.206      -0.028        0.138      -0.046 #> 13      setosa       -0.206      -0.428       -0.062      -0.146 #> 14      setosa       -0.706      -0.428       -0.362      -0.146 #> 15      setosa        0.794       0.572       -0.262      -0.046 #> 16      setosa        0.694       0.972        0.038       0.154 #> 17      setosa        0.394       0.472       -0.162       0.154 #> 18      setosa        0.094       0.072       -0.062       0.054 #> 19      setosa        0.694       0.372        0.238       0.054 #> 20      setosa        0.094       0.372        0.038       0.054 #> 21      setosa        0.394      -0.028        0.238      -0.046 #> 22      setosa        0.094       0.272        0.038       0.154 #> 23      setosa       -0.406       0.172       -0.462      -0.046 #> 24      setosa        0.094      -0.128        0.238       0.254 #> 25      setosa       -0.206      -0.028        0.438      -0.046 #> 26      setosa       -0.006      -0.428        0.138      -0.046 #> 27      setosa       -0.006      -0.028        0.138       0.154 #> 28      setosa        0.194       0.072        0.038      -0.046 #> 29      setosa        0.194      -0.028       -0.062      -0.046 #> 30      setosa       -0.306      -0.228        0.138      -0.046 #> 31      setosa       -0.206      -0.328        0.138      -0.046 #> 32      setosa        0.394      -0.028        0.038       0.154 #> 33      setosa        0.194       0.672        0.038      -0.146 #> 34      setosa        0.494       0.772       -0.062      -0.046 #> 35      setosa       -0.106      -0.328        0.038      -0.046 #> 36      setosa       -0.006      -0.228       -0.262      -0.046 #> 37      setosa        0.494       0.072       -0.162      -0.046 #> 38      setosa       -0.106       0.172       -0.062      -0.146 #> 39      setosa       -0.606      -0.428       -0.162      -0.046 #> 40      setosa        0.094      -0.028        0.038      -0.046 #> 41      setosa       -0.006       0.072       -0.162       0.054 #> 42      setosa       -0.506      -1.128       -0.162       0.054 #> 43      setosa       -0.606      -0.228       -0.162      -0.046 #> 44      setosa       -0.006       0.072        0.138       0.354 #> 45      setosa        0.094       0.372        0.438       0.154 #> 46      setosa       -0.206      -0.428       -0.062       0.054 #> 47      setosa        0.094       0.372        0.138      -0.046 #> 48      setosa       -0.406      -0.228       -0.062      -0.046 #> 49      setosa        0.294       0.272        0.038      -0.046 #> 50      setosa       -0.006      -0.128       -0.062      -0.046 #> 51  versicolor        1.064       0.430        0.440       0.074 #> 52  versicolor        0.464       0.430        0.240       0.174 #> 53  versicolor        0.964       0.330        0.640       0.174 #> 54  versicolor       -0.436      -0.470       -0.260      -0.026 #> 55  versicolor        0.564       0.030        0.340       0.174 #> 56  versicolor       -0.236       0.030        0.240      -0.026 #> 57  versicolor        0.364       0.530        0.440       0.274 #> 58  versicolor       -1.036      -0.370       -0.960      -0.326 #> 59  versicolor        0.664       0.130        0.340      -0.026 #> 60  versicolor       -0.736      -0.070       -0.360       0.074 #> 61  versicolor       -0.936      -0.770       -0.760      -0.326 #> 62  versicolor       -0.036       0.230       -0.060       0.174 #> 63  versicolor        0.064      -0.570       -0.260      -0.326 #> 64  versicolor        0.164       0.130        0.440       0.074 #> 65  versicolor       -0.336       0.130       -0.660      -0.026 #> 66  versicolor        0.764       0.330        0.140       0.074 #> 67  versicolor       -0.336       0.230        0.240       0.174 #> 68  versicolor       -0.136      -0.070       -0.160      -0.326 #> 69  versicolor        0.264      -0.570        0.240       0.174 #> 70  versicolor       -0.336      -0.270       -0.360      -0.226 #> 71  versicolor       -0.036       0.430        0.540       0.474 #> 72  versicolor        0.164       0.030       -0.260      -0.026 #> 73  versicolor        0.364      -0.270        0.640       0.174 #> 74  versicolor        0.164       0.030        0.440      -0.126 #> 75  versicolor        0.464       0.130        0.040      -0.026 #> 76  versicolor        0.664       0.230        0.140       0.074 #> 77  versicolor        0.864       0.030        0.540       0.074 #> 78  versicolor        0.764       0.230        0.740       0.374 #> 79  versicolor        0.064       0.130        0.240       0.174 #> 80  versicolor       -0.236      -0.170       -0.760      -0.326 #> 81  versicolor       -0.436      -0.370       -0.460      -0.226 #> 82  versicolor       -0.436      -0.370       -0.560      -0.326 #> 83  versicolor       -0.136      -0.070       -0.360      -0.126 #> 84  versicolor        0.064      -0.070        0.840       0.274 #> 85  versicolor       -0.536       0.230        0.240       0.174 #> 86  versicolor        0.064       0.630        0.240       0.274 #> 87  versicolor        0.764       0.330        0.440       0.174 #> 88  versicolor        0.364      -0.470        0.140      -0.026 #> 89  versicolor       -0.336       0.230       -0.160      -0.026 #> 90  versicolor       -0.436      -0.270       -0.260      -0.026 #> 91  versicolor       -0.436      -0.170        0.140      -0.126 #> 92  versicolor        0.164       0.230        0.340       0.074 #> 93  versicolor       -0.136      -0.170       -0.260      -0.126 #> 94  versicolor       -0.936      -0.470       -0.960      -0.326 #> 95  versicolor       -0.336      -0.070       -0.060      -0.026 #> 96  versicolor       -0.236       0.230       -0.060      -0.126 #> 97  versicolor       -0.236       0.130       -0.060      -0.026 #> 98  versicolor        0.264       0.130        0.040      -0.026 #> 99  versicolor       -0.836      -0.270       -1.260      -0.226 #> 100 versicolor       -0.236       0.030       -0.160      -0.026 #> 101  virginica       -0.288       0.326        0.448       0.474 #> 102  virginica       -0.788      -0.274       -0.452      -0.126 #> 103  virginica        0.512       0.026        0.348       0.074 #> 104  virginica       -0.288      -0.074        0.048      -0.226 #> 105  virginica       -0.088       0.026        0.248       0.174 #> 106  virginica        1.012       0.026        1.048       0.074 #> 107  virginica       -1.688      -0.474       -1.052      -0.326 #> 108  virginica        0.712      -0.074        0.748      -0.226 #> 109  virginica        0.112      -0.474        0.248      -0.226 #> 110  virginica        0.612       0.626        0.548       0.474 #> 111  virginica       -0.088       0.226       -0.452      -0.026 #> 112  virginica       -0.188      -0.274       -0.252      -0.126 #> 113  virginica        0.212       0.026       -0.052       0.074 #> 114  virginica       -0.888      -0.474       -0.552      -0.026 #> 115  virginica       -0.788      -0.174       -0.452       0.374 #> 116  virginica       -0.188       0.226       -0.252       0.274 #> 117  virginica       -0.088       0.026       -0.052      -0.226 #> 118  virginica        1.112       0.826        1.148       0.174 #> 119  virginica        1.112      -0.374        1.348       0.274 #> 120  virginica       -0.588      -0.774       -0.552      -0.526 #> 121  virginica        0.312       0.226        0.148       0.274 #> 122  virginica       -0.988      -0.174       -0.652      -0.026 #> 123  virginica        1.112      -0.174        1.148      -0.026 #> 124  virginica       -0.288      -0.274       -0.652      -0.226 #> 125  virginica        0.112       0.326        0.148       0.074 #> 126  virginica        0.612       0.226        0.448      -0.226 #> 127  virginica       -0.388      -0.174       -0.752      -0.226 #> 128  virginica       -0.488       0.026       -0.652      -0.226 #> 129  virginica       -0.188      -0.174        0.048       0.074 #> 130  virginica        0.612       0.026        0.248      -0.426 #> 131  virginica        0.812      -0.174        0.548      -0.126 #> 132  virginica        1.312       0.826        0.848      -0.026 #> 133  virginica       -0.188      -0.174        0.048       0.174 #> 134  virginica       -0.288      -0.174       -0.452      -0.526 #> 135  virginica       -0.488      -0.374        0.048      -0.626 #> 136  virginica        1.112       0.026        0.548       0.274 #> 137  virginica       -0.288       0.426        0.048       0.374 #> 138  virginica       -0.188       0.126       -0.052      -0.226 #> 139  virginica       -0.588       0.026       -0.752      -0.226 #> 140  virginica        0.312       0.126       -0.152       0.074 #> 141  virginica        0.112       0.126        0.048       0.374 #> 142  virginica        0.312       0.126       -0.452       0.274 #> 143  virginica       -0.788      -0.274       -0.452      -0.126 #> 144  virginica        0.212       0.226        0.348       0.274 #> 145  virginica        0.112       0.326        0.148       0.474 #> 146  virginica        0.112       0.026       -0.352       0.274 #> 147  virginica       -0.288      -0.474       -0.552      -0.126 #> 148  virginica       -0.088       0.026       -0.352      -0.026 #> 149  virginica       -0.388       0.426       -0.152       0.274 #> 150  virginica       -0.688       0.026       -0.452      -0.226 #>  #> Grouped by:  Species  [3 | 50 (0)]  # or: iris_num %-f% fmean(g = iris$Species) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width #> 1          0.094       0.072       -0.062      -0.046 #> 2         -0.106      -0.428       -0.062      -0.046 #> 3         -0.306      -0.228       -0.162      -0.046 #> 4         -0.406      -0.328        0.038      -0.046 #> 5         -0.006       0.172       -0.062      -0.046 #> 6          0.394       0.472        0.238       0.154 #> 7         -0.406      -0.028       -0.062       0.054 #> 8         -0.006      -0.028        0.038      -0.046 #> 9         -0.606      -0.528       -0.062      -0.046 #> 10        -0.106      -0.328        0.038      -0.146 #> 11         0.394       0.272        0.038      -0.046 #> 12        -0.206      -0.028        0.138      -0.046 #> 13        -0.206      -0.428       -0.062      -0.146 #> 14        -0.706      -0.428       -0.362      -0.146 #> 15         0.794       0.572       -0.262      -0.046 #> 16         0.694       0.972        0.038       0.154 #> 17         0.394       0.472       -0.162       0.154 #> 18         0.094       0.072       -0.062       0.054 #> 19         0.694       0.372        0.238       0.054 #> 20         0.094       0.372        0.038       0.054 #> 21         0.394      -0.028        0.238      -0.046 #> 22         0.094       0.272        0.038       0.154 #> 23        -0.406       0.172       -0.462      -0.046 #> 24         0.094      -0.128        0.238       0.254 #> 25        -0.206      -0.028        0.438      -0.046 #> 26        -0.006      -0.428        0.138      -0.046 #> 27        -0.006      -0.028        0.138       0.154 #> 28         0.194       0.072        0.038      -0.046 #> 29         0.194      -0.028       -0.062      -0.046 #> 30        -0.306      -0.228        0.138      -0.046 #> 31        -0.206      -0.328        0.138      -0.046 #> 32         0.394      -0.028        0.038       0.154 #> 33         0.194       0.672        0.038      -0.146 #> 34         0.494       0.772       -0.062      -0.046 #> 35        -0.106      -0.328        0.038      -0.046 #> 36        -0.006      -0.228       -0.262      -0.046 #> 37         0.494       0.072       -0.162      -0.046 #> 38        -0.106       0.172       -0.062      -0.146 #> 39        -0.606      -0.428       -0.162      -0.046 #> 40         0.094      -0.028        0.038      -0.046 #> 41        -0.006       0.072       -0.162       0.054 #> 42        -0.506      -1.128       -0.162       0.054 #> 43        -0.606      -0.228       -0.162      -0.046 #> 44        -0.006       0.072        0.138       0.354 #> 45         0.094       0.372        0.438       0.154 #> 46        -0.206      -0.428       -0.062       0.054 #> 47         0.094       0.372        0.138      -0.046 #> 48        -0.406      -0.228       -0.062      -0.046 #> 49         0.294       0.272        0.038      -0.046 #> 50        -0.006      -0.128       -0.062      -0.046 #> 51         1.064       0.430        0.440       0.074 #> 52         0.464       0.430        0.240       0.174 #> 53         0.964       0.330        0.640       0.174 #> 54        -0.436      -0.470       -0.260      -0.026 #> 55         0.564       0.030        0.340       0.174 #> 56        -0.236       0.030        0.240      -0.026 #> 57         0.364       0.530        0.440       0.274 #> 58        -1.036      -0.370       -0.960      -0.326 #> 59         0.664       0.130        0.340      -0.026 #> 60        -0.736      -0.070       -0.360       0.074 #> 61        -0.936      -0.770       -0.760      -0.326 #> 62        -0.036       0.230       -0.060       0.174 #> 63         0.064      -0.570       -0.260      -0.326 #> 64         0.164       0.130        0.440       0.074 #> 65        -0.336       0.130       -0.660      -0.026 #> 66         0.764       0.330        0.140       0.074 #> 67        -0.336       0.230        0.240       0.174 #> 68        -0.136      -0.070       -0.160      -0.326 #> 69         0.264      -0.570        0.240       0.174 #> 70        -0.336      -0.270       -0.360      -0.226 #> 71        -0.036       0.430        0.540       0.474 #> 72         0.164       0.030       -0.260      -0.026 #> 73         0.364      -0.270        0.640       0.174 #> 74         0.164       0.030        0.440      -0.126 #> 75         0.464       0.130        0.040      -0.026 #> 76         0.664       0.230        0.140       0.074 #> 77         0.864       0.030        0.540       0.074 #> 78         0.764       0.230        0.740       0.374 #> 79         0.064       0.130        0.240       0.174 #> 80        -0.236      -0.170       -0.760      -0.326 #> 81        -0.436      -0.370       -0.460      -0.226 #> 82        -0.436      -0.370       -0.560      -0.326 #> 83        -0.136      -0.070       -0.360      -0.126 #> 84         0.064      -0.070        0.840       0.274 #> 85        -0.536       0.230        0.240       0.174 #> 86         0.064       0.630        0.240       0.274 #> 87         0.764       0.330        0.440       0.174 #> 88         0.364      -0.470        0.140      -0.026 #> 89        -0.336       0.230       -0.160      -0.026 #> 90        -0.436      -0.270       -0.260      -0.026 #> 91        -0.436      -0.170        0.140      -0.126 #> 92         0.164       0.230        0.340       0.074 #> 93        -0.136      -0.170       -0.260      -0.126 #> 94        -0.936      -0.470       -0.960      -0.326 #> 95        -0.336      -0.070       -0.060      -0.026 #> 96        -0.236       0.230       -0.060      -0.126 #> 97        -0.236       0.130       -0.060      -0.026 #> 98         0.264       0.130        0.040      -0.026 #> 99        -0.836      -0.270       -1.260      -0.226 #> 100       -0.236       0.030       -0.160      -0.026 #> 101       -0.288       0.326        0.448       0.474 #> 102       -0.788      -0.274       -0.452      -0.126 #> 103        0.512       0.026        0.348       0.074 #> 104       -0.288      -0.074        0.048      -0.226 #> 105       -0.088       0.026        0.248       0.174 #> 106        1.012       0.026        1.048       0.074 #> 107       -1.688      -0.474       -1.052      -0.326 #> 108        0.712      -0.074        0.748      -0.226 #> 109        0.112      -0.474        0.248      -0.226 #> 110        0.612       0.626        0.548       0.474 #> 111       -0.088       0.226       -0.452      -0.026 #> 112       -0.188      -0.274       -0.252      -0.126 #> 113        0.212       0.026       -0.052       0.074 #> 114       -0.888      -0.474       -0.552      -0.026 #> 115       -0.788      -0.174       -0.452       0.374 #> 116       -0.188       0.226       -0.252       0.274 #> 117       -0.088       0.026       -0.052      -0.226 #> 118        1.112       0.826        1.148       0.174 #> 119        1.112      -0.374        1.348       0.274 #> 120       -0.588      -0.774       -0.552      -0.526 #> 121        0.312       0.226        0.148       0.274 #> 122       -0.988      -0.174       -0.652      -0.026 #> 123        1.112      -0.174        1.148      -0.026 #> 124       -0.288      -0.274       -0.652      -0.226 #> 125        0.112       0.326        0.148       0.074 #> 126        0.612       0.226        0.448      -0.226 #> 127       -0.388      -0.174       -0.752      -0.226 #> 128       -0.488       0.026       -0.652      -0.226 #> 129       -0.188      -0.174        0.048       0.074 #> 130        0.612       0.026        0.248      -0.426 #> 131        0.812      -0.174        0.548      -0.126 #> 132        1.312       0.826        0.848      -0.026 #> 133       -0.188      -0.174        0.048       0.174 #> 134       -0.288      -0.174       -0.452      -0.526 #> 135       -0.488      -0.374        0.048      -0.626 #> 136        1.112       0.026        0.548       0.274 #> 137       -0.288       0.426        0.048       0.374 #> 138       -0.188       0.126       -0.052      -0.226 #> 139       -0.588       0.026       -0.752      -0.226 #> 140        0.312       0.126       -0.152       0.074 #> 141        0.112       0.126        0.048       0.374 #> 142        0.312       0.126       -0.452       0.274 #> 143       -0.788      -0.274       -0.452      -0.126 #> 144        0.212       0.226        0.348       0.274 #> 145        0.112       0.326        0.148       0.474 #> 146        0.112       0.026       -0.352       0.274 #> 147       -0.288      -0.474       -0.552      -0.126 #> 148       -0.088       0.026       -0.352      -0.026 #> 149       -0.388       0.426       -0.152       0.274 #> 150       -0.688       0.026       -0.452      -0.226"},{"path":"https://www.sciviews.org/svBase/reference/is_dtx.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a data frame (data.frame, data.table or tibble) — is_dtx","title":"Test if the object is a data frame (data.frame, data.table or tibble) — is_dtx","text":"Test object data frame (data.frame, data.table tibble)","code":""},{"path":"https://www.sciviews.org/svBase/reference/is_dtx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a data frame (data.frame, data.table or tibble) — is_dtx","text":"","code":"is_dtx(x, strict = TRUE)  is_dtf(x, strict = TRUE)  is_dtt(x, strict = TRUE)  is_dtbl(x, strict = TRUE)"},{"path":"https://www.sciviews.org/svBase/reference/is_dtx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a data frame (data.frame, data.table or tibble) — is_dtx","text":"x object strict strictly corresponding class TRUE, default, subclassed (FALSE). strict = TRUE, grouped_df tibbles grouped_ts tsibbles also considered (tibbles tsibbles dplyr::group_by() applied).","code":""},{"path":"https://www.sciviews.org/svBase/reference/is_dtx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a data frame (data.frame, data.table or tibble) — is_dtx","text":"functions return TRUE object correct class, otherwise return FALSE. is_dtx() return TRUE x one data.frame, data.table tibble.","code":""},{"path":"https://www.sciviews.org/svBase/reference/is_dtx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if the object is a data frame (data.frame, data.table or tibble) — is_dtx","text":"","code":"# data(mtcars) is_dtf(mtcars) # TRUE #> [1] TRUE is_dtx(mtcars) # Also TRUE #> [1] TRUE is_dtt(mtcars) # FALSE #> [1] FALSE is_dtbl(mtcars) # FALSE #> [1] FALSE # but... is_dtt(as_dtt(mtcars)) # TRUE #> [1] TRUE is_dtx(as_dtt(mtcars)) # TRUE #> [1] TRUE is_dtbl(as_dtbl(mtcars)) # TRUE #> [1] TRUE is_dtx(as_dtbl(mtcars)) # TRUE #> [1] TRUE is_dtx(as_dtbl(mtcars) |> dplyr::group_by(cyl)) # TRUE (special case) #> [1] TRUE  is_dtx(\"some string\") # FALSE #> [1] FALSE"},{"path":"https://www.sciviews.org/svBase/reference/speedy_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Speedy functions (mainly from collapse and data.table) to manipulate data frames — speedy_functions","title":"Speedy functions (mainly from collapse and data.table) to manipulate data frames — speedy_functions","text":"Tidyverse defines coherent set tools manipulate data frames use non-standard evaluation sometimes require extra care. functions, like mutate() summarise() defined dplyr tidyr packages. collapse package proposes couple functions similar interface, different much faster code. instance, fselect() similar select(), fsummarise() similar summarise(). functions implemented, arguments argument names differ, behavior may different, like frename() uses old_name = new_name, rename() uses new_name = old_name! speedy functions prefixed \"s\", like smutate(), build work initiated collapse propose series paired functions tidy ones. , smutate() mutate() \"speedy\" 'tidy\" counterparts used similar, identical way. notation using \"s\" prefix draw attention particularities. classes function speedy_fn. Avoid mixing tidy, speedy non-tidy/speedy functions pipeline. global page present speedy functions one place. meant clear detailed help page individual \"s\" functions. Please, refer corresponding help page non-\"s\" paired function details! can use svMisc's .?smutate syntax go help page non-\"s\" function message.","code":""},{"path":"https://www.sciviews.org/svBase/reference/speedy_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speedy functions (mainly from collapse and data.table) to manipulate data frames — speedy_functions","text":"","code":"list_speedy_functions()  sgroup_by(.data, ...)  sungroup(.data, ...)  srename(.data, ...)  srename_with(.data, .fn, .cols = everything(), ...)  sfilter(.data, ...)  sfilter_ungroup(.data, ...)  sselect(.data, ...)  smutate(.data, ..., .keep = \"all\")  smutate_ungroup(.data, ..., .keep = \"all\")  stransmute(.data, ...)  stransmute_ungroup(.data, ...)  ssummarise(.data, ...)  sfull_join(x, y, by = NULL, suffix = c(\".x\", \".y\"), copy = FALSE, ...)  sleft_join(x, y, by = NULL, suffix = c(\".x\", \".y\"), copy = FALSE, ...)  sright_join(x, y, by = NULL, suffix = c(\".x\", \".y\"), copy = FALSE, ...)  sinner_join(x, y, by = NULL, suffix = c(\".x\", \".y\"), copy = FALSE, ...)  sbind_rows(..., .id = NULL)  scount(   x,   ...,   wt = NULL,   sort = FALSE,   name = NULL,   .drop = dplyr::group_by_drop_default(x),   sort_cat = TRUE,   decreasing = FALSE )  stally(   x,   wt = NULL,   sort = FALSE,   name = NULL,   sort_cat = TRUE,   decreasing = FALSE )  sadd_count(   x,   ...,   wt = NULL,   sort = FALSE,   name = NULL,   .drop = NULL,   sort_cat = TRUE,   decreasing = FALSE )  sadd_tally(   x,   wt = NULL,   sort = FALSE,   name = NULL,   sort_cat = TRUE,   decreasing = FALSE )  sbind_cols(   ...,   .name_repair = c(\"unique\", \"universal\", \"check_unique\", \"minimal\") )  sarrange(.data, ..., .by_group = FALSE)  spull(.data, var = -1, name = NULL, ...)  sdistinct(.data, ..., .keep_all = FALSE)  sdrop_na(data, ...)  sreplace_na(data, replace, ...)  spivot_longer(data, cols, names_to = \"name\", values_to = \"value\", ...)  spivot_wider(data, names_from = name, values_from = value, ...)  suncount(data, weights, .remove = TRUE, .id = NULL)  sunite(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE)  sseparate(   data,   col,   into,   sep = \"[^[:alnum:]]+\",   remove = TRUE,   convert = FALSE,   ... )  sseparate_rows(data, ..., sep = \"[^[:alnum:].]+\", convert = FALSE)  sfill(data, ..., .direction = c(\"down\", \"up\", \"downup\", \"updown\"))  sextract(   data,   col,   into,   regex = \"([[:alnum:]]+)\",   remove = TRUE,   convert = FALSE,   ... )"},{"path":"https://www.sciviews.org/svBase/reference/speedy_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Speedy functions (mainly from collapse and data.table) to manipulate data frames — speedy_functions","text":".data data frame (data.frame, data.table tibble's tbl_df) ... Arguments dependent context function time, evaluated standard way (cf. tidyverse approach). .fn function use. .cols list column apply transformation. moment, existing columns, means .cols = everything() implemented .keep columns keep. default \"\", possible values \"used\", \"unused\", \"none\" (see mutate()). x data frame (data.frame, data.table tibble's tbl_df). y second data frame. list names columns use joining two data frames. suffix suffix column names use differentiate columns come first second data frame. default c(\".x\", \".y\"). copy argument compatibility \"t\" matching functions, used . .id name column origin id, either names arguments named, numbers. wt Frequency weights. Can NULL variable. Use data masking. sort TRUE largest group shown top. name name new column output (n default, existing column must name, error generated).4 .drop levels observations dropped (TRUE default). sort_cat levels sorted (TRUE default). decreasing sorting done decreasing order (FALSE default)? .name_repair name \"repaired\" avoid duplicate column names? See dplyr::bind_cols() details. .by_group Logical. TRUE rows first arranger grouping variables . FALSE default. var variable specified name, positive negative integer (counting end). default -1 returns last variable. .keep_all TRUE keep variables .data. data data frame, replace_na() vector data frame. replace data vector, unique value replace NAs, otherwise, list values, one per column data frame. cols selection columns using tidy-select syntax, seetidyr::pivot_longer(). names_to character vector name names columns names. values_to string name column receives values. names_from column columns containing names (use tidy selection quote names). values_from Idem column columns contain values. weights vector weight use \"uncount\" data. .remove TRUE, weights name column, column removed data. col name quoted new column united variable. sep Separator use values united separated columns. remove TRUE initial columns separated also removed data. na.rm TRUE, NAs eliminated uniting values. Name new column put separated variables. Use NA items drop. convert 'TRUE resulting values converted numeric, integer logical. .direction Direction fill missing data: \"\" (default), \"\", \"downup\" (first , ), \"updown\" (opposite). regex regular expression used extract desired values (use one group ( ) element ).","code":""},{"path":"https://www.sciviews.org/svBase/reference/speedy_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Speedy functions (mainly from collapse and data.table) to manipulate data frames — speedy_functions","text":"See corresponding \"non-s\" function full help page indication return values.","code":""},{"path":"https://www.sciviews.org/svBase/reference/speedy_functions.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Speedy functions (mainly from collapse and data.table) to manipulate data frames — speedy_functions","text":"ssummarise() function support n() dplyr::summarise(). can use fn() instead, , must give variable name argument. fn() alternative can also used summarise() homogeneous syntax two. dplyr, slice() slice_xxx() functions added yet available dbplyr. Also anti_join(), semi_join() nest_join() implemented yet. tidyr expand(), chop(), unchop(), nest(), unnest(), unnest_longer(), unnest_wider(), hoist(), pack() unpack() implemented yet.","code":""},{"path":"https://www.sciviews.org/svBase/reference/speedy_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Speedy functions (mainly from collapse and data.table) to manipulate data frames — speedy_functions","text":"","code":"# TODO..."},{"path":"https://www.sciviews.org/svBase/reference/svBase-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Objects like Data Frames for 'SciViews::R' — svBase-package","title":"Base Objects like Data Frames for 'SciViews::R' — svBase-package","text":"{svBase} package sets way data frames (objects like R base's data.frame, data.table tibble tbl_df) managed SciViews::R. user can select class object uses default many SciViews::R functions return format. Conversion one made easier, including management data.frame's row names data.table's keys. Also homogeneous ways create data frame print also provided.","code":""},{"path":"https://www.sciviews.org/svBase/reference/svBase-package.html","id":"important-functions","dir":"Reference","previous_headings":"","what":"Important functions","title":"Base Objects like Data Frames for 'SciViews::R' — svBase-package","text":"dtx() creates data frame preferred format, following functions dtbl(), dtf() dtt() force respectively creation data frame one specified three formats. Use getOption(\"SciViews.as_dtx\", default = as_dtt) specify function use convert preferred format.","code":""},{"path":"https://www.sciviews.org/svBase/reference/tidy_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy functions (mainly from dplyr and tidyr) to manipulate data frames — tidy_functions","title":"Tidy functions (mainly from dplyr and tidyr) to manipulate data frames — tidy_functions","text":"Tidyverse defines coherent set tools manipulate data frames use non-standard evaluation sometimes require extra care. functions, like mutate() summarise() defined dplyr tidyr packages. using variants, like dtplyr data.frame objects, dbplyr work external databases, successive commands pipeline pooled together computed. One collect() result get final form. tidy functions \"speedy\" counterpart prefixed \"s\" listed withlist_tidy_functions(). main usages (excluding less used arguments, compatibles speedy \"s\" counterpart functions): group_by(.data, ...) ungroup(.data) rename(.data, ...) rename_with(.data, .fn, .cols = everything(), ...) filter(.data, ...) select(.data, ...) mutate(.data, ..., .keep = \"\") transmute(.data, ...) summarise(.data, ...) full_join(x, y, = NULL, suffix = c(\".x\", \".y\"), copy = FALSE, ...) left_join(x, y, = NULL, suffix = c(\".x\", \".y\"), copy = FALSE, ...) right_join(x, y, = NULL, suffix = c(\".x\", \".y\"), copy = FALSE, ...) inner_join(x, y, = NULL, suffix = c(\".x\", \".y\"), copy = FALSE, ...) bind_rows(..., .id = NULL) bind_cols(..., .name_repair = c(\"unique\", \"universal\", \"check_unique\", \"minimal\")) arrange(.data, ..., .by_group = FALSE) count(x, ..., wt = NULL, sort = FALSE, name = NULL) tally(x, wt = NULL, sort = FALSE, name = NULL) add_count(x, ..., wt = NULL, sort = FALSE, name = NULL) add_tally(x, wt = NULL, sort = FALSE, name = NULL) pull(.data, var = -1, name = NULL) distinct(.data, ..., .keep_all = FALSE) drop_na(data, ...) replace_na(data, replace) pivot_longer(data, cols, names_to = \"name\", values_to = \"value\") pivot_wider(data, names_from = name, values_from = value) uncount(data, weights, .remove = TRUE, .id = NULL) unite(data, col, ..., sep = \"_\", remove = TRUE, na.rm = FALSE) separate(data, col, , sep = \"[^[:alnum:]]+\", remove = TRUE, convert = FALSE) separate_rows(data, ..., sep = \"[^[:alnum:].]+\", convert = FALSE) fill(data, ..., .direction = c(\"\", \"\", \"downup\", \"updown\")) extract(data, col, , regex = \"([[:alnum:]]+)\", remove = TRUE, convert = FALSE) plus functions defined .","code":""},{"path":"https://www.sciviews.org/svBase/reference/tidy_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy functions (mainly from dplyr and tidyr) to manipulate data frames — tidy_functions","text":"","code":"list_tidy_functions()  filter_ungroup(.data, ...)  mutate_ungroup(.data, ..., .keep = \"all\")  transmute_ungroup(.data, ...)"},{"path":"https://www.sciviews.org/svBase/reference/tidy_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy functions (mainly from dplyr and tidyr) to manipulate data frames — tidy_functions","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See mutate() details. ... Arguments dependent context function time, evaluated standard way (cf. tidyverse approach). .keep columns keep. default \"\", possible values \"used\", \"unused\", \"none\" (see mutate()).","code":""},{"path":"https://www.sciviews.org/svBase/reference/tidy_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy functions (mainly from dplyr and tidyr) to manipulate data frames — tidy_functions","text":"See corresponding \"non-t\" function full help page indication return values. list_tidy_functions() returns list tidy(verse) functions speedy \"s\" counterpart, see speedy_functions.","code":""},{"path":"https://www.sciviews.org/svBase/reference/tidy_functions.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tidy functions (mainly from dplyr and tidyr) to manipulate data frames — tidy_functions","text":"help page basic aims mainly list tidy functions. complete help, see dplyr tidyr packages. #' dplyr, slice() slice_xxx() functions added yet available dbplyr. Also anti_join(), semi_join() nest_join() implemented yet. dplyr, slice() slice_xxx() functions added yet available dbplyr. Also anti_join(), semi_join() nest_join() implemented yet. tidyr expand(), chop(), unchop(), nest(), unnest(), unnest_longer(), unnest_wider(), hoist(), pack() unpack() implemented yet.","code":""},{"path":[]},{"path":"https://www.sciviews.org/svBase/reference/tidy_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy functions (mainly from dplyr and tidyr) to manipulate data frames — tidy_functions","text":"","code":"# TODO..."},{"path":"https://www.sciviews.org/svBase/news/index.html","id":"svbase-140","dir":"Changelog","previous_headings":"","what":"svBase 1.4.0","title":"svBase 1.4.0","text":"scount(), sadd_count(), tally() add_tally() now based collapse::fcount() changes better match arguments behavior corresponding{dplyr} functions. However, much work needed align speedy functions behavior tidy counterparts, part tidy functions sort frequencies columns collapse::fcount() function used sorts categories labels… sort default.","code":""},{"path":"https://www.sciviews.org/svBase/news/index.html","id":"svbase-130","dir":"Changelog","previous_headings":"","what":"svBase 1.3.0","title":"svBase 1.3.0","text":"alternate assignments %<-% %->% evaluate collect() try() construct, silently swallowing error . collect.default() method defined make sure return intact object collected without error. Default print() methods restored data.frame data.table objects. Since {dplyr} functions now return object receiving (tibble -> tibble, data.frame -> data.frame data.table -> data.table), use lazy_dt() mandatory benefit {dtplyr} translation {data.table} statements speed performance, examples adapted accordingly. Bug correction sunite(), argument col= setting name column always “col”.","code":""},{"path":"https://www.sciviews.org/svBase/news/index.html","id":"svbase-122","dir":"Changelog","previous_headings":"","what":"svBase 1.2.2","title":"svBase 1.2.2","text":"is_dtx() similar functions now also detect spec_tbl_df objects {readr} groupedData {datasets} true data frames, even strict = TRUE. Consequently, default_dtx() converts also objects. as_dtx() similar functions get labels units corresponding attributes groupedData objects apply vector resulting data frame.","code":""},{"path":"https://www.sciviews.org/svBase/news/index.html","id":"svbase-121","dir":"Changelog","previous_headings":"","what":"svBase 1.2.1","title":"svBase 1.2.1","text":"tidy functions reworked use original function name, one “t” prefix. functions list family functions now start list_, like list_tidy_functions(), list_speedy_functions() list_fstat_functions(). dtx_rows() similar functions added avoid using dtx(tribble(...)).","code":""},{"path":"https://www.sciviews.org/svBase/news/index.html","id":"svbase-120","dir":"Changelog","previous_headings":"","what":"svBase 1.2.0","title":"svBase 1.2.0","text":"Addition “tidy” ‘t’ functions “speedy” ‘s’ functions. tidy functions mostly renamed versions {dplyr} {tidyr} functions, speedy functions similar interface {collapse} {data.table} big part . Arguments homogenized sometimes reduced restrict features compatibles two groups. function n() working ssummarise(). Use fn(var) instead, can also use tsummarise(). Addition “fast” functions {collapse} + fn() fna(). %xf% operators xcan -, /, etc. readable alternative TRA= fast functions. robust strict is_dt_() functions grouped data.","code":""},{"path":"https://www.sciviews.org/svBase/news/index.html","id":"svbase-111","dir":"Changelog","previous_headings":"","what":"svBase 1.1.1","title":"svBase 1.1.1","text":"dtf(), creating column name .rowname (value getOption(\"SciViews.dtx.rownames\")) transform row names resulting data.frame object.","code":""},{"path":"https://www.sciviews.org/svBase/news/index.html","id":"svbase-110","dir":"Changelog","previous_headings":"","what":"svBase 1.1.0","title":"svBase 1.1.0","text":"group_by() used, collect() creates grouped_df. special object now recognized converted as_dtx() co ungrouped data frame. collect_dtx()/dtf()/dtt()/dtbl() added force right data frame class (collect_dtbl() giving result collect(), except grouped data also ungrouped).","code":""},{"path":"https://www.sciviews.org/svBase/news/index.html","id":"svbase-100","dir":"Changelog","previous_headings":"","what":"svBase 1.0.0","title":"svBase 1.0.0","text":"important functions added manage data frames (data.frame, data.table, tibble tbl_df objects) coherent way, possibility define one’s preferred object. dtx(), as_dtx() default_dtx() functions can used packages automatically convert data frames preferred object without forcing user. alternate assignment operators %<-% %->% collect result {dtplyr} ({dbplyr}) convert preferred data frame object. Also, multiple deconstructing assignment implemented {zeallot} also usable addition conversion preferred data frame. Row names printed data.frame using {pillar}. now column named class <rownames>. as_matrix() applied tbl_df object honor .rownames. Corrected.","code":""},{"path":"https://www.sciviews.org/svBase/news/index.html","id":"svbase-090","dir":"Changelog","previous_headings":"","what":"svBase 0.9.0","title":"svBase 0.9.0","text":"first version package main functions manage data.frame/data.table/tibble objects.","code":""}]
